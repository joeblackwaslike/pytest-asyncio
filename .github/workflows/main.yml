---
name: CI

on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  PYTHON_LATEST: 3.11

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_LATEST }}
    - name: Install GitHub matcher for ActionLint checker
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
    - name: Install pre-commit
      run: python -m pip install pre-commit
    - name: Run pre-commit checks
      run: pre-commit run --all-files --show-diff-on-failure
    - name: Install check-wheel-content, and twine
      run: python -m pip install build check-wheel-contents tox twine
    - name: Build package
      run: python -m build
    - name: List result
      run: ls -l dist
    - name: Check wheel contents
      run: check-wheel-contents dist/*.whl
    - name: Check long_description
      run: python -m twine check dist/*
    - name: Install pytest-asyncio
      run: pip install .
    - name: Get version info
      id: version
      run: python ./tools/get-version.py >> $GITHUB_OUTPUT
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        set -xe
        python -VV
        python -m site
        python -m pip install --upgrade pip
        python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions
    - name: Run tox targets for ${{ matrix.python-version }}
      run: python -m tox

    - name: Store coverage data
      uses: actions/upload-artifact@v3
      with:
        name: coverage-per-interpreter
        path: .coverage.*

  check:
    name: Check
    if: always()
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_LATEST }}
    - name: Install Coverage.py
      run: |
        set -xe
        python -m pip install --upgrade coverage[toml]
    - name: Download coverage data for all test runs
      uses: actions/download-artifact@v3
      with:
        name: coverage-per-interpreter
    - name: Combine coverage data and create report
      run: |
        coverage combine
        coverage xml
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: coverage.xml
        fail_ci_if_error: true

  deploy:
    name: Deploy
    environment: release
        # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [lint, check]
    runs-on: ubuntu-latest
    steps:
    - name: Install pandoc
      run: |
        sudo apt-get install -y pandoc
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download distributions
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Collected dists
      run: |
        tree dist
    - name: Convert README.rst to Markdown
      run: |
        pandoc -s -o README.md README.rst
    - name: PyPI upload
      uses: pypa/gh-action-pypi-publish@v1.8.1
      with:
        packages_dir: dist
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: pytest-asyncio ${{ needs.lint.outputs.version }}
        artifacts: dist/*
        bodyFile: README.md
        prerelease: ${{ needs.lint.outputs.prerelease }}
        token: ${{ secrets.GITHUB_TOKEN }}
